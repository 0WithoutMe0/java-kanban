import taskmanager.managers.*;
import taskmanager.tasks.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;


import static org.junit.jupiter.api.Assertions.*;

class InMemoryTaskManagerTest {

    Managers managers;
    InMemoryTaskManager memoryTaskManager;
    Task task1;
    Task task2;
    Subtask subtask1;
    Subtask subtask2;
    Epic epic1;
    Epic epic2;

    @BeforeEach
    void beforeEach() {
        managers = new Managers();
        memoryTaskManager = (InMemoryTaskManager) managers.getDefault();
        task1 = new Task("Задача 1", "ДЗ 1", Status.NEW, TaskType.MIDDLE_TASK);
        memoryTaskManager.addTask(task1);
        task2 = new Task("Задача 2", "ДЗ 2", Status.NEW, TaskType.MIDDLE_TASK);
        memoryTaskManager.addTask(task2);
        epic1 = new Epic("Эпик 1", "ДЗ 1", Status.NEW, TaskType.EPIC, new ArrayList<>());
        memoryTaskManager.addEpic(epic1);
        epic2 = new Epic("Эпик 2", "ДЗ 2", Status.NEW, TaskType.EPIC, new ArrayList<>());
        memoryTaskManager.addEpic(epic2);
        subtask1 = new Subtask("Субзадача 1", "ДЗ 1", Status.NEW, TaskType.SUBTASK, epic1.getId());
        memoryTaskManager.addSubtask(subtask1);
        subtask2 = new Subtask("Субзадача 2", "ДЗ 2", Status.NEW, TaskType.SUBTASK, epic2.getId());
        memoryTaskManager.addSubtask(subtask2);
    }

    @Test
    void correctCountId() {
        assertEquals(6, memoryTaskManager.getCountId());
    }

    @Test
    void tasksWithSameId() {
        Task task3 = new Task("Задача 1", "ДЗ 1", Status.NEW, TaskType.MIDDLE_TASK);
        Task task4 = new Task("Задача 2", "ДЗ 2", Status.IN_PROGRESS, TaskType.MIDDLE_TASK);
        task3.setId(1);
        task4.setId(1);
        assertTrue(task3.equals(task4));
    }

    @Test
    void heirsTasksWithSameId() {
        epic1 = new Epic("Эпик 1", "ДЗ 1", Status.NEW, TaskType.EPIC, new ArrayList<>());
        epic2 = new Epic("Эпик 2", "ДЗ 2", Status.NEW, TaskType.EPIC, new ArrayList<>());
        subtask1 = new Subtask("Субзадача 1", "ДЗ 1", Status.NEW, TaskType.SUBTASK, epic1.getId());
        subtask2 = new Subtask("Субзадача 2", "ДЗ 2", Status.NEW, TaskType.SUBTASK, epic2.getId());
        epic1.setId(1);
        epic2.setId(1);
        subtask1.setId(1);
        subtask2.setId(1);

        assertTrue(subtask1.equals(subtask2));
        assertTrue(epic1.equals(epic2));
        assertFalse(epic1.equals(subtask1));
    }

    @Test
    void isInitializedInstance() {
        assertNotNull(managers.getDefault());
        assertNotNull(managers.getDefaultHistory());
        assertTrue(managers.getDefault() instanceof TaskManager);
        assertTrue(managers.getDefaultHistory() instanceof HistoryManager);
    }

    @Test
    void inMemoryTaskManagerFunctional() {
        assertEquals(task1, memoryTaskManager.getTaskById(0));
        assertEquals(epic1, memoryTaskManager.getEpicById(2));
        assertEquals(subtask1, memoryTaskManager.getSubtaskById(4));
    }

    @Test
    void taskShouldRemainUnchangedAfterAddingToManager() {
        assertEquals("Задача 1", task1.getName());
        assertEquals("ДЗ 1", task1.getDescription());
        assertEquals(Status.NEW, task1.getStatus());
        assertEquals(TaskType.MIDDLE_TASK, task1.getType());
    }



    @Test
    void manualAndAutoGeneratedIdsShouldNotConflict() {
        Task task3 = new Task("Задача 1", "ДЗ 1", Status.NEW, TaskType.MIDDLE_TASK);
        task3.setId(500);
        memoryTaskManager.updateTask(task3);

        assertNotEquals(task3.getId(), task1.getId());
        assertNotNull(memoryTaskManager.getTaskById(task1.getId()));
        assertNotNull(memoryTaskManager.getTaskById(task3.getId()));
    }



    @Test
    void addNewTask() {
        InMemoryTaskManager taskManager = (InMemoryTaskManager) managers.getDefault();
        Task task = new Task("Test addNewTask", "Test addNewTask description", Status.NEW, TaskType.MIDDLE_TASK);
        taskManager.addTask(task);
        final int taskId = taskManager.getCountId() - 1;

        final Task savedTask = taskManager.getTaskById(taskId);

        assertNotNull(savedTask, "Задача не найдена.");
        assertEquals(task, savedTask, "Задачи не совпадают.");

        final List<Task> tasks = taskManager.getAllTasks();

        assertNotNull(tasks, "Задачи не возвращаются.");
        assertEquals(1, tasks.size(), "Неверное количество задач.");
        assertEquals(task, tasks.get(0), "Задачи не совпадают.");
    }

    @Test
    void epicStatusShouldUpdateBasedOnSubtasks() {
        Subtask subtask3 = new Subtask("Субзадача 3", "ДЗ 3", Status.IN_PROGRESS, TaskType.SUBTASK, epic1.getId());
        memoryTaskManager.addSubtask(subtask3);
        assertEquals(Status.IN_PROGRESS, epic1.getStatus(), "Статус эпика должен быть IN_PROGRESS");

        subtask1.setStatus(Status.DONE);
        memoryTaskManager.updateSubtask(subtask1);
        subtask3.setStatus(Status.DONE);
        memoryTaskManager.updateSubtask(subtask3);
        System.out.println(memoryTaskManager.getEpicById(epic1.getId()).getSubtasks());
        assertEquals(Status.DONE, epic1.getStatus(), "Статус эпика должен быть DONE");
    }


    @Test
    void removeAllTasks() {
        assertEquals(List.of(task1, task2), memoryTaskManager.getAllTasks());
        assertEquals(List.of(subtask1, subtask2), memoryTaskManager.getAllSubtasks());
        assertEquals(List.of(epic1, epic2), memoryTaskManager.getAllEpics());

        memoryTaskManager.removeAllTasks();
        memoryTaskManager.removeAllSubtasks();
        memoryTaskManager.removeAllEpics();

        assertEquals(List.of(), memoryTaskManager.getAllTasks());
        assertEquals(List.of(), memoryTaskManager.getAllSubtasks());
        assertEquals(List.of(), memoryTaskManager.getAllEpics());
    }

}